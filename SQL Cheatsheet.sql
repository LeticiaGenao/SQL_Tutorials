---Creaing a table
CREATE TABLE LEVEL1_CUSTOMER
(CUSTOMER_NUM CHAR(3) PRIMARY KEY, CUSTOMER_NAME CHAR (35), BALANCE DECIMAL(8,2),
CREDIT_LIMIT DECIMAL (8,2), REP_NUM CHAR(2) );

--- Insert Values 
INSERT INTO LEVEL1_CUSTOMER
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE, CREDIT_LIMIT, REP_NUM
FROM CUSTOMER
WHERE CREDIT_LIMIT=7500;

-------------------------------------------------------------------------------------------------
--Joining Two Tables 
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME, REP.REP_NUM, REP.LAST_NAME, REP.FIRST_NAME
FROM CUSTOMER, REP
WHERE CUSTOMER.REP_NUM=REP.REP_NUM

--Joining Two Tables (continued)
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME, REP.REP_NUM, REP.LAST_NAME, REP.FIRST_NAME
FROM CUSTOMER, REP
WHERE CUSTOMER.REP_NUM=REP.REP_NUM
AND CREDIT_LIMIT =7500

--Joining Two Tables (continued)
SELECT ORDER_LINE.ORDER_NUM, ORDER_LINE.ITEM_NUM, ITEM.DESCRIPTION, ORDER_LINE.NUM_ORDERED, ORDER_LINE.QUOTED_PRICE, ITEM.PRICE
FROM ORDER_LINE, ITEM
WHERE ORDER_LINE.ITEM_NUM=ITEM.ITEM_NUM

--Comparing JOINS, IN, and EXISTS (continued)
--WHERE CLAUSE
SELECT ITEM.DESCRIPTION
FROM ORDER_LINE, ITEM
WHERE ORDER_LINE.ITEM_NUM=ITEM.ITEM_NUM
AND ORDER_NUM='51623'

--Using the IN Operator
SELECT ITEM.DESCRIPTION
FROM ITEM
WHERE ITEM_NUM IN
(SELECT ITEM_NUM
FROM ORDER_LINE
WHERE ORDER_NUM = '51623')

--Using the EXISTS Operator
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE EXISTS
(SELECT *
FROM ORDER_LINE
WHERE ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM
AND ORDER_LINE.ITEM_NUM='FD11')

--Using a Subquery within a Subquery (continued)
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE ORDER_NUM IN
(SELECT ORDER_NUM
FROM ORDER_LINE
WHERE ITEM_NUM IN
(SELECT ITEM_NUM
FROM ITEM
WHERE STOREHOUSE = '3'))

--A Comprehensive Example
SELECT ORDERS.CUSTOMER_NUM, ORDERS.ORDER_NUM, ORDERS.ORDER_DATE,
SUM (ORDER_LINE.NUM_ORDERED*ORDER_LINE.QUOTED_PRICE) AS ORDER_TOTAL
FROM ORDERS, ORDER_LINE
WHERE ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM
GROUP BY ORDERS.ORDER_NUM, CUSTOMER_NUM, ORDER_DATE 
HAVING SUM(NUM_ORDERED*QUOTED_PRICE) > 500
ORDER BY ORDERS.ORDER_NUM

--Using an Alias (continued)
SELECT R.REP_NUM, R.LAST_NAME, R.FIRST_NAME, C.CUSTOMER_NUM, C.CUSTOMER_NAME
FROM REP R, CUSTOMER C
WHERE R.REP_NUM = C.REP_NUM

--Joining a Table to Itself (continued)
SELECT F.CUSTOMER_NUM, F.CUSTOMER_NAME, S.CUSTOMER_NUM, S.CUSTOMER_NAME, F.CITY
FROM CUSTOMER F, CUSTOMER S
WHERE F.CITY = S.CITY
AND F.CUSTOMER_NUM < S.CUSTOMER_NUM
ORDER BY F.CUSTOMER_NUM, S.CUSTOMER_NUM

--Using a Self-Join on a Primary Key (continued)
SELECT E.EMPLOYEE_NUM, E.LAST_NAME, E.FIRST_NAME, M.EMPLOYEE_NUM AS MGR_NUM,
M.LAST_NAME AS MGR_LAST, M.FIRST_NAME AS MGR_FIRST
FROM EMPLOYEE E, EMPLOYEE M
WHERE E.MGR_EMPLOYEE_NUM = M.EMPLOYEE_NUM
ORDER BY E.EMPLOYEE_NUM

-- WHERE IS THE EMPLOYEE TABLE?

--Joining Several Tables 
SELECT ORDER_LINE.ITEM_NUM, ORDER_LINE.ORDER_NUM, orders.ORDER_DATE, customer.CUSTOMER_NUM, customer.CUSTOMER_NAME, REP.LAST_NAME
FROM ORDER_LINE, ORDERS, CUSTOMER, REP
WHERE ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM
AND CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM
AND REP.REP_NUM= CUSTOMER.REP_NUM
ORDER BY ORDER_LINE.ITEM_NUM, ORDER_LINE.ORDER_NUM

--UNION operator
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME
FROM CUSTOMER
WHERE REP_NUM='15'
UNION
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME
FROM CUSTOMER, ORDERS
WHERE CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM

--INTERSECT operator
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME
FROM CUSTOMER
WHERE REP_NUM='15'
INTERSECT
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME
FROM CUSTOMER, ORDERS
WHERE CUSTOMER.CUSTOMER_NUM=ORDERS.CUSTOMER_NUM

--Using the MINUS operator (minus function not supported)
SELECT CUSTOMER.CUSTOMER_NUM,CUSTOMER.CUSTOMER_NAME
FROM CUSTOMER
WHERE REP_NUM='15'
MINUS
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME
FROM CUSTOMER, ORDERS
WHERE CUSTOMER.CUSTOMER_NUM=ORDERS.CUSTOMER_NUM

--ALL operator
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME, CUSTOMER.BALANCE, CUSTOMER.REP_NUM
FROM CUSTOMER
WHERE BALANCE > ALL
(SELECT BALANCE
FROM CUSTOMER
WHERE REP_NUM = '30')

--ANY operator
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER.CUSTOMER_NAME, CUSTOMER.BALANCE, CUSTOMER.REP_NUM
FROM CUSTOMER
WHERE BALANCE > ANY
(SELECT BALANCE
FROM CUSTOMER
WHERE REP_NUM = '30')

--INNER JOIN
SELECT CUSTOMER.CUSTOMER_NAME, CUSTOMER.CUSTOMER_NAME, ORDERS.ORDER_NUM, ORDERS.ORDER_DATE
FROM CUSTOMER
INNER JOIN ORDERS
ON CUSTOMER.CUSTOMER_NUM=ORDERS.CUSTOMER_NUM
ORDER BY CUSTOMER.CUSTOMER_NUM;

---------------------------------------------------------------------------------------------
---Creating, inserting, and joining tables

CREATE TABLE tblCountry (CountryId DECIMAL(2,0) PRIMARY KEY, CountryName CHAR(25))
CREATE TABLE tblState (StateId DECIMAL(2,0) PRIMARY KEY, CountryId DECIMAL(2,0), StateName CHAR(25) )

INSERT INTO tblCountry VALUES ( 1, 'India')
INSERT INTO tblCountry VALUES ( 2, 'Nepal')
INSERT INTO tblCountry VALUES ( 4, 'Srilanka')


INSERT INTO tblState VALUES (  1, 1, 'Maharastra')
INSERT INTO tblState VALUES (  2, 1, 'Punjab')
INSERT INTO tblState VALUES (  4, NULL, 'California')
INSERT INTO tblState VALUES (  3, 2, 'Kathmandu') 



SELECT * FROM tblCountry
SELECT * FROM tblState


SELECT *
FROM tblCountry 
INNER JOIN tblState 
on tblCountry.CountryId=tblState.CountryId

SELECT *
FROM tblCountry
Left Join tblState
on tblCountry.CountryId=tblState.CountryId

SELECT *
FROM tblCountry
Right Join tblState
ON tblCountry.CountryId=tblState.CountryId

SELECT *
FROM tblCountry
FULL OUTER JOIN tblState
ON tblCountry.CountryId=tblState.CountryId



--------------------------------------------------------------------------------------------
---More Join examples

--Create Customer Table
CREATE TABLE [dbo].[Customer](
	[CustomerId] [int] NOT NULL,
	[CityId] [int] NULL,
	[CustomerName] [varchar](50) NOT NULL
) ON [PRIMARY]
GO
--Insert Customer Records
INSERT [dbo].[Customer] ([CustomerId], [CityId], [CustomerName]) VALUES (1, 1, N'Bob Smith')
GO
INSERT [dbo].[Customer] ([CustomerId], [CityId], [CustomerName]) VALUES (2, 1, N'Sally Smith')
GO
INSERT [dbo].[Customer] ([CustomerId], [CityId], [CustomerName]) VALUES (3, 2, N'Tom Smith')
GO
INSERT [dbo].[Customer] ([CustomerId], [CityId], [CustomerName]) VALUES (4, NULL, N'Mary Smith')
GO
--Create City Table
CREATE TABLE [dbo].[City](
	[CityId] [int] NOT NULL,
	[CityName] [varchar](50) NOT NULL
) ON [PRIMARY]
GO
--Insert City Records
INSERT [dbo].[City] ([CityId], [CityName]) VALUES (1, N'Kansas City')
GO
INSERT [dbo].[City] ([CityId], [CityName]) VALUES (2, N'New York')
GO
INSERT [dbo].[City] ([CityId], [CityName]) VALUES (3, N'Houston')
GO

--Inner Join
SELECT *
FROM CUSTOMER
INNER JOIN CITY
ON CUSTOMER.CityId=CITY.CityId

--Left Join
SELECT *
FROM CUSTOMER
LEFT JOIN CITY
ON CUSTOMER.CityId=City.CityId

--Right Join
SELECT *
FROM CUSTOMER
RIGHT JOIN CITY
ON Customer.CityId=City.CityId

--Full Outer Join
SELECT *
FROM CUSTOMER AS CS
FULL OUTER JOIN CITY AS CY
ON CS.CityId=CY.CityId


--SPECIFIC CITY JOIN
SELECT *
FROM CUSTOMER AS CS
LEFT JOIN CITY AS CY
ON CS.CityId=CY.CityId AND CY.CityName='NEW YORK'
-- OR
SELECT *
FROM CUSTOMER AS CS
LEFT JOIN CITY AS CY
ON CS.CityId=CY.CityId 
WHERE CY.CityName='NEW YORK'
---------------------------------------------------------------------------------------------
--- Update a row 
UPDATE LEVEL1_CUSTOMER
SET CUSTOMER_NAME = 'Unique Gifts and Toys'
WHERE CUSTOMER_NUM= '796';

UPDATE LEVEL1_CUSTOMER
SET CREDIT_LIMIT = 8000
WHERE REP_NUM= '45'
AND BALANCE > 2000;

--- Rollback transactions
BEGIN TRANSACTION DEL
INSERT INTO LEVEL1_CUSTOMER
VALUES
('907', 'Glenn''s British Toys', 0, 7500, '45');
ROLLBACK TRANSACTION DEL;

--- Committed Transactions
BEGIN TRANSACTION COM
INSERT INTO LEVEL1_CUSTOMER
VALUES
('807', 'TOYS R US', 0, 7500, '22')
COMMIT TRANSACTION COM;
ROLLBACK TRANSACTION COM;

---Delete a row
DELETE FROM LEVEL1_CUSTOMER
WHERE CUSTOMER_NUM='807';

---Delete a row
DELETE FROM LEVEL1_CUSTOMER
WHERE CUSTOMER_NUM='893';
 
 --Update a table - setting a new value
 UPDATE LEVEL1_CUSTOMER
 SET BALANCE = NULL
 WHERE CUSTOMER_NUM = '665';

 --Altering a table - adding a type
 ALTER TABLE LEVEL1_CUSTOMER
 ADD CUSTOMER_TYPE CHAR (1);

 UPDATE LEVEL1_CUSTOMER
 SET CUSTOMER_TYPE = 'R';

 UPDATE LEVEL1_CUSTOMER
 SET CUSTOMER_TYPE = 'S'
 WHERE CUSTOMER_NUM= '334';

 ---Describe a table in SQL Server
SP_HELP LEVEL1_CUSTOMER;

---SLIDE 31 MODIFY DOES NOT WORK IN SQL SERVER, IT'S ALTER COLUMN BUT NOT NULL ISN'T WORKING.
ALTER TABLE LEVEL1_CUSTOMER
ALTER COLUMN CREDIT_LIMIT NOT NULL;

DROP TABLE LEVEL1_CUSTOMER;

---------------------------------------------------------------------------
----Views

---Create a view
CREATE VIEW TOYS AS
SELECT ITEM_NUM, DESCRIPTION, ON_HAND, PRICE
FROM ITEM
WHERE CATEGORY = 'TOY';

SELECT *
FROM TOYS
WHERE PRICE > 100;

---Create view and change column names
CREATE VIEW TYS (INUM, DSC, OH, PRCE) AS
SELECT ITEM_NUM, DESCRIPTION, ON_HAND, PRICE
FROM ITEM
WHERE CATEGORY = 'TOY';

SELECT *
FROM TYS

---Create view,change column names, join two tables.
CREATE VIEW REP_CUST (RNUM, RLAST, RFIRST, CNUM, CNAME) AS
SELECT REP.REP_NUM, LAST_NAME, FIRST_NAME, CUSTOMER_NUM, CUSTOMER_NAME
FROM REP, CUSTOMER
WHERE REP.REP_NUM=CUSTOMER.REP_NUM;


SELECT *
FROM REP_CUST

CREATE VIEW CRED_CUST (CREDIT_LIMIT, NUM_CUSTOMERS) AS
SELECT CREDIT_LIMIT, COUNT (*)
FROM CUSTOMER
GROUP BY CREDIT_LIMIT;

---Creating index
CREATE INDEX BALIND ON CUSTOMER(BALANCE);


SELECT*
FROM CUSTOMER

ALTER TABLE ORDERS
ADD FOREIGN KEY (CUSTOMER_NUM) REFERENCES CUSTOMER;

SELECT*
FROM CUSTOMER

-- INTEGRITY CONTRAINT 
ALTER TABLE ITEM 
ADD CHECK (CATEGORY IN ('GME', 'PZL', 'TOY') );

--CONSTRAINT ABOVE DOES NOT ALLOW COMMAND TO RUN 
UPDATE ITEM
SET CATEGORY = 'MAG'
WHERE ITEM_NUM = 'KL78';


SELECT*
FROM ITEM
;